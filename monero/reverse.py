from config import *
from helper_mn import *

def print_R2L():
    print("start\n")
    print("account")
    print("seed:              ",test_mnemonic_seed)
    print("hex:               ",test_hexadecimal_seed)
    print("secret spend key:  ",test_private_spend_key)
    print("secret view key:   ",test_private_view_key)
    print("public spend key:  ",test_public_spend_key)
    print("public view key:   ",test_public_view_key)
    print("public address:    ",test_public_address)
    #print("\nblock")
    print("\ntransaction")
    #print("extra:             ","".join(['{:0>2}'.format(hex(e)[2:]) for e in test_extra[1:33]]))
    #print("extra -> parseExtra(extra) -> pub")
    print("pub:               ",test_pub,parseExtra(test_extra)['pub'])
    #print("tx_hash",test_tx_hash)
    #print("public_tx_key",test_public_tx_key)
    print("pub, private view key -> generate_key_derivation(pub, private_view_key) -> derived_key")
    print("derived key:       ",test_derived_key,binascii.hexlify(generate_key_derivation(test_pub, test_private_view_key, True)).decode())
    print("\noutputs")
    print("derived_key, output index, public spend key -> derive_public_key(derived_key, output_index, public_spend_key) -> public output key")
    pubkey = derive_public_key(binascii.unhexlify(test_derived_key.encode()), 0, test_public_spend_key,True)
    print("(output) pub key 0:",test_output_0,pubkey)
    #print("key image 0",key_image_0)
    #print("output 1",test_output_1)
    #print("key image 1",key_image_1)
    #print("output 2",test_output_2)
    #print("key image 2",key_image_2)
    print("end")

def print_L2R():
    print("end")
    print("output 0",test_output_0)
    print("public address:                      ",test_public_address)
    print("public address -> public view key:   ",base58.decode(test_public_address)[66:130],test_public_view_key)
    print("public address -> public spend key:  ",base58.decode(test_public_address)[2:66],test_public_spend_key)
    print("start")

if __name__ == '__main__':
    print(__file__)
    print_R2L()
    print_L2R()
